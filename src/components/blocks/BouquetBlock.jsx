import React, { useEffect, useState } from 'react';
import BouquetPreview from '../bouquet/BouquetPreview';
import EditBouquetModal from '../bouquet/EditBouquetModal';
import { collection, addDoc, Timestamp } from 'firebase/firestore';
import { db } from '../../firebase/firebase'; // 1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º db

const QUICK_ADD_IDS = ['roses', 'euro']; // ID –∫—Ä–∞—Å–Ω–æ–π –∏ –±–µ–ª–æ–π —Ä–æ–∑—ã –∏–∑ flowers.js
const BouquetBlock = ({ block, onUpdate, editable, ownerId }) => {
    const bouquetData = block?.data || {};

    const [flowers, setFlowers] = useState(bouquetData.flowers || []);
    const [wrappings, setWrappings] = useState(bouquetData.wrappings || []);
    const [selected, setSelected] = useState(bouquetData.selected || {});
    const [wrapping, setWrapping] = useState(bouquetData.wrapping || null);
    const [editOpen, setEditOpen] = useState(false);
    const [isOrdering, setIsOrdering] = useState(false);
// --- –ù–û–í–û–ï: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ ---
    const [deliveryMethod, setDeliveryMethod] = useState('delivery'); // 'delivery' –∏–ª–∏ 'pickup'
    const deliveryOptions = bouquetData.deliveryOptions || { delivery: 2500, pickup: 0 };

    useEffect(() => {
        const newData = block?.data || {};
        setFlowers(newData.flowers || []);
        setWrappings(newData.wrappings || []);
        setSelected(newData.selected || {});
        setWrapping(newData.wrapping || null);
    }, [block.data]);

    const increaseFlower = (f) => {
        setSelected((prev) => ({
            ...prev,
            [f.id]: (prev[f.id] || 0) + 1,
        }));
    };

    const decreaseFlower = (f) => {
        setSelected((prev) => {
            const current = prev[f.id] || 0;
            if (current <= 1) {
                const { [f.id]: _, ...rest } = prev;
                return rest;
            }
            return { ...prev, [f.id]: current - 1 };
        });
    };
    const setQuantity = (f, amount) => {
        setSelected((prev) => ({
            ...prev,
            [f.id]: amount,
        }));
    };
    const bouquetTotal = Object.entries(selected).reduce((sum, [id, count]) => {
        const f = flowers.find((f) => f.id === id);
        return sum + (f?.price || 0) * count;
    }, 0) + (wrapping?.price || 0);

    const deliveryCost = deliveryMethod === 'delivery' ? (deliveryOptions.delivery || 0) : (deliveryOptions.pickup || 0);
    const total = bouquetTotal + deliveryCost;
    const handleSaveChanges = (dataFromModal) => {
        const newBlockData = {
            ...bouquetData,
            ...dataFromModal // –ü—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–æ–¥–∞–ª–∫–∏
        };

        if (onUpdate) {
            onUpdate({ ...block, data: newBlockData });
        }
        setEditOpen(false);
    };
    // –ö–æ–¥ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const handleOrderClick = async () => {
        const whatsAppNumber = block.data?.whatsappNumber;
        if (!whatsAppNumber || !ownerId) return;

        setIsOrdering(true);

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞
        const items = Object.entries(selected).map(([id, count]) => {
            const flower = flowers.find((f) => f.id === id);
            return { name: flower?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ü–≤–µ—Ç–æ–∫', quantity: count, price: flower?.price || 0 };
        });

        if (wrapping) {
            items.push({ name: wrapping.name, quantity: 1, price: wrapping.price });
        }

        const deliveryInfo = {
            name: deliveryMethod === 'delivery' ? '–î–æ—Å—Ç–∞–≤–∫–∞' : '–°–∞–º–æ–≤—ã–≤–æ–∑',
            price: deliveryCost
        };

        const orderData = {
            items,
            totalPrice: total,
            delivery: deliveryInfo, // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ –æ –¥–æ—Å—Ç–∞–≤–∫–µ
            customerPhone: whatsAppNumber.replace(/\D/g, ''),
            status: 'new',
            createdAt: Timestamp.now()
        };

        // 1. –°–ù–ê–ß–ê–õ–ê —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ù–ï–ú–ï–î–õ–ï–ù–ù–û –æ—Ç–∫—Ä—ã–≤–∞–µ–º WhatsApp
        let message = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç:\n\n${items.map(item => `- ${item.name} √ó ${item.quantity}`).join('\n')}\n\n*–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è: ${deliveryInfo.name} (+${deliveryInfo.price} ‚Ç∏)*\n*–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: ${total} ‚Ç∏*`;
        const encodedMessage = encodeURIComponent(message);
        window.open(`https://wa.me/${whatsAppNumber}?text=${encodedMessage}`, '_blank');

        // 2. –ü–û–¢–û–ú —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try {
            const ordersRef = collection(db, 'users', ownerId, 'orders');
            await addDoc(ordersRef, orderData);
            // –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–æ–Ω–µ

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –≤ —Ñ–æ–Ω–µ:", error);
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ,
            // –Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ—Ü–µ—Å—Å —É–∂–µ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ.
        } finally {
            setIsOrdering(false);
        }
    };
    return (
        <div className="p-4 bg-white rounded-xl border">
            <h2 className="text-lg font-semibold mb-2">üíê –°–æ–±–µ—Ä–∏ —Å–≤–æ–π –±—É–∫–µ—Ç</h2>

            {/* --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ü–≤–µ—Ç–æ–≤ —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º —Å–∫—Ä–æ–ª–ª–æ–º --- */}
            {flowers.length > 0 ? (
                <div className="flex overflow-x-auto space-x-4 pb-3 mb-2">
                    {flowers.map((f) => (
                        <div key={f.id} className={`w-32 shrink-0 border rounded-lg p-2 flex flex-col items-center text-center transition-all ${selected[f.id] ? 'border-green-500 bg-green-50' : 'border-gray-200'}`}>
                            <img src={f.imageUrl} alt={f.name} className="w-16 h-16 object-contain mb-1" />
                            <span className="text-sm font-medium h-10 flex items-center">{f.name}</span>
                            <span className="text-xs text-gray-600 mb-2">{f.price} ‚Ç∏</span>

                            {/* --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –ù–æ–≤—ã–π –±–ª–æ–∫ –∫–Ω–æ–ø–æ–∫ --- */}
                            {QUICK_ADD_IDS.includes(f.id) && (selected[f.id] || 0) > 0 && (                                <div className="flex items-center justify-center gap-2 my-2">
                                    <button onClick={() => setQuantity(f, 51)} className="text-xs border rounded-full px-3 py-1 text-gray-700 hover:bg-gray-100 font-semibold">51 —à—Ç</button>
                                    <button onClick={() => setQuantity(f, 101)} className="text-xs border rounded-full px-3 py-1 text-gray-700 hover:bg-gray-100 font-semibold">101 —à—Ç</button>
                                </div>
                            )}

                            <div className="flex items-center gap-2 mt-auto">
                                <button onClick={() => decreaseFlower(f)} className="bg-gray-200 text-gray-800 w-6 h-6 rounded-full flex items-center justify-center text-lg">‚àí</button>
                                <span className="px-1 text-base font-semibold w-5 text-center">{selected[f.id] || 0}</span>
                                <button onClick={() => increaseFlower(f)} className="bg-gray-200 text-gray-800 w-6 h-6 rounded-full flex items-center justify-center text-lg">+</button>
                            </div>
                        </div>
                    ))}
                </div>
            ) : (
                <p className="text-sm text-gray-500 mb-4">–¶–≤–µ—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–ª–æ–∫", —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö.</p>
            )}

            {/* --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–ø–∞–∫–æ–≤–æ–∫ —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º —Å–∫—Ä–æ–ª–ª–æ–º --- */}
            {wrappings.length > 0 && (
                <div className="border-t pt-3 mt-3">
                    <p className="text-sm font-medium mb-2">–í—ã–±–µ—Ä–∏—Ç–µ —É–ø–∞–∫–æ–≤–∫—É:</p>
                    <div className="flex overflow-x-auto space-x-3 pb-2">
                        {wrappings.map((w) => (
                            <button key={w.id} onClick={() => setWrapping(w)} className={`shrink-0 border rounded-lg p-2 text-sm flex items-center gap-2 transition-all ${wrapping?.id === w.id ? 'border-green-500 bg-green-50' : 'border-gray-200'}`}>
                                <img src={w.imageUrl} alt={w.name} className="w-10 h-10 object-contain" />
                                <span className="font-medium">{w.name} ‚Äì {w.price} ‚Ç∏</span>
                            </button>
                        ))}
                        <button onClick={() => setWrapping(null)} className={`shrink-0 border rounded-lg px-3 py-2 text-sm transition-all ${!wrapping ? 'border-red-500 bg-red-50' : 'border-gray-200'}`}>
                            –ë–µ–∑ —É–ø–∞–∫–æ–≤–∫–∏
                        </button>
                    </div>
                </div>
            )}

            {/* --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –£—Å–ª–æ–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ --- */}
            {(Object.keys(selected).length > 0 || wrapping) ? (
                <BouquetPreview
                    selected={selected}
                    flowers={flowers}
                    selectedWrapping={wrapping?.id}
                    wrappings={wrappings}
                    onClear={() => {
                        setSelected({});
                        setWrapping(null);
                    }}
                />
            ) : (
                <div className="mt-6 text-center p-8 bg-gray-50 rounded-lg border">
                    <p className="text-sm text-gray-500">–î–æ–±–∞–≤—å—Ç–µ —Ü–≤–µ—Ç—ã –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —É–ø–∞–∫–æ–≤–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä.</p>
                </div>
            )}
            {/* --- –ù–û–í–´–ô –ë–õ–û–ö: –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –ø–æ–ª—É—á–µ–Ω–∏—è --- */}
            <div className="border-t pt-4 mt-4">
                <h3 className="text-sm font-semibold mb-2">–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:</h3>
                <div className="flex gap-3">
                    <button
                        onClick={() => setDeliveryMethod('delivery')}
                        className={`flex-1 text-sm border rounded-lg p-2 text-center transition-all ${deliveryMethod === 'delivery' ? 'border-green-500 bg-green-50' : 'border-gray-200'}`}
                    >
                        <span className="font-medium">–î–æ—Å—Ç–∞–≤–∫–∞</span>
                        <span className="block text-xs text-gray-600">+{deliveryOptions.delivery || 0} ‚Ç∏</span>
                    </button>
                    <button
                        onClick={() => setDeliveryMethod('pickup')}
                        className={`flex-1 text-sm border rounded-lg p-2 text-center transition-all ${deliveryMethod === 'pickup' ? 'border-green-500 bg-green-50' : 'border-gray-200'}`}
                    >
                        <span className="font-medium">–°–∞–º–æ–≤—ã–≤–æ–∑</span>
                        <span className="block text-xs text-gray-600">+{deliveryOptions.pickup?.price || 0} ‚Ç∏</span>
                    </button>
                </div>
            </div>
            <div className="border-t pt-4 mt-4">
                <h3 className="text-sm font-semibold mb-1">–°–æ—Å—Ç–∞–≤ –±—É–∫–µ—Ç–∞:</h3>
                {Object.keys(selected).length === 0 ? (
                    <p className="text-sm text-gray-500">–¶–≤–µ—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã</p>
                ) : (
                    <ul className="text-sm list-disc list-inside">
                        {Object.entries(selected).map(([id, count]) => {
                            const f = flowers.find((f) => f.id === id);
                            return f ? <li key={id}>{f.name} √ó {count} = {f.price * count} ‚Ç∏</li> : null;
                        })}
                    </ul>
                )}
                {wrapping && <p className="text-sm mt-1">–£–ø–∞–∫–æ–≤–∫–∞: {wrapping.name} ‚Äì {wrapping.price} ‚Ç∏</p>}
                <p className="text-sm mt-1">–°—Ç–æ–∏–º–æ—Å—Ç—å –±—É–∫–µ—Ç–∞: {bouquetTotal} ‚Ç∏</p>
                <p className="text-sm mt-1">
                    {deliveryMethod === 'delivery' ? '–î–æ—Å—Ç–∞–≤–∫–∞' : '–°–∞–º–æ–≤—ã–≤–æ–∑'}: +{deliveryCost} ‚Ç∏
                </p>
                <p className="mt-2 font-bold text-base">–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total} ‚Ç∏</p>
            </div>
            {/* --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –ö–Ω–æ–ø–∫–∞ –∑–∞–∫–∞–∑–∞ --- */}
            {block.data?.whatsappNumber && Object.keys(selected).length > 0 && (
                <div className="mt-6 border-t pt-4">
                    <button
                        onClick={handleOrderClick}
                        disabled={isOrdering}
                        className="w-full bg-green-500 text-white font-semibold py-3 rounded-lg hover:bg-green-600 transition-all flex items-center justify-center gap-2 disabled:bg-gray-400"
                    >
                        {isOrdering ? '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞...' : '–ó–∞–∫–∞–∑–∞—Ç—å —á–µ—Ä–µ–∑ WhatsApp'}
                    </button>
                </div>
            )}
            {editable && (
                <div className="mt-4">
                    <button onClick={() => setEditOpen(true)} className="text-blue-600 text-sm underline">
                        ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–ª–æ–∫
                    </button>
                </div>
            )}

            {editOpen && (
                <EditBouquetModal
                    initialData={bouquetData} // –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∞
                    onClose={() => setEditOpen(false)}
                    onSave={handleSaveChanges}
                />
            )}
        </div>
    );
};

export default BouquetBlock;